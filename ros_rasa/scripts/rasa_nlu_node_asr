#!/usr/bin/env python3

import os
import sys
import threading

# ROS
import rospy

from clf_speech_msgs.msg import Entity, NLU
from clf_speech_msgs.srv import Understand, UnderstandRequest, UnderstandResponse
from clf_speech_msgs.msg import ASR
import std_msgs.msg

from ros_rasa import rasa_nlu


class RASANode:
    def __init__(self, model):
        rospy.loginfo(logger_name="RASANode", msg="initializing:")
        rospy.loginfo(logger_name="RASANode", msg=f" - model={model}")

        self.recognizer = rasa_nlu.RasaNLU(model)
        self.lock = threading.Lock()

        self.nlu_srv = rospy.Service("~understand", Understand, self.understand_cb)
        self.result_pub = rospy.Publisher("~nlu", NLU, queue_size=1)
        self.sub = rospy.Subscriber("~input", ASR, self.new_message)

        self.debug_pub = rospy.Publisher("~/debug/nlu", NLU, queue_size=1)
        self.sub_debug = rospy.Subscriber(
            "~/debug/input", std_msgs.msg.String, self.new_debug
        )

    def parse(self, msg: ASR) -> NLU:
        with self.lock:
            result = self.recognizer.inference(msg.text)

        nlu = NLU()

        nlu.lang = msg.lang
        nlu.text = result["text"]
        nlu.intent = result["intent"]["name"]
        nlu.conf = result["intent"]["confidence"]

        for entity in result["entities"]:
            e = Entity()
            e.key = entity["entity"]
            e.value = entity["value"]
            e.role = entity.get("role", "")
            e.group = entity.get("group", -1)
            nlu.entities.append(e)

        return nlu

    def understand_cb(self, req: UnderstandRequest) -> UnderstandResponse:
        res = UnderstandResponse()
        res.nlu = self.parse(req.text)
        rospy.loginfo(logger_name="RASANode", msg=f"Got request for: {res.nlu}")
        return res

    def new_message(self, data):
        nlu = self.parse(data.data)
        self.result_pub.publish(nlu)
        rospy.loginfo(logger_name="RASANode", msg=f"{nlu}")

    def new_debug(self, data):
        nlu = self.parse(data.data)
        self.debug_pub.publish(nlu)
        rospy.logdebug(logger_name="RASANode", msg=f"{nlu}")


if __name__ == "__main__":

    # Start ROS node
    rospy.init_node("rasa")

    try:
        _model = os.path.expanduser(rospy.get_param("~model"))
    except KeyError as e:
        rospy.logerr(logger_name="RASANode", msg="Parameter %s not found" % e)
        sys.exit(1)

    node = RASANode(_model)

    rospy.loginfo(logger_name="RASANode", msg="\nRASA running")

    rospy.spin()
