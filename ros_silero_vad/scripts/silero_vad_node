#!/usr/bin/env python3

import torch
import numpy as np
from typing import List
import sys
import threading
import os.path

import rospy
from std_srvs.srv import SetBool, SetBoolRequest, SetBoolResponse

from audio_common_msgs.msg import AudioData, AudioInfo
from std_msgs.msg import Float32, Bool

from clf_speech_msgs.srv import SetFloat32, SetFloat32Request, SetFloat32Response

from ros_whisper.simple_recorder import SimpleRecorder
from ros_silero_vad.silero import SileroVAD


class SileroVadNode(SimpleRecorder):
    buffer_lock = threading.Lock()

    def __init__(self, start_amp=0.5) -> None:
        super().__init__()

        self.recording = False
        self.start_amp = start_amp

        self.enabled = self.chunk = True

        self.vad_iterator = SileroVAD()

        self._enable_srv = rospy.Service("~enable_vad", SetBool, self.enable_cb)
        self._min_amp_srv = rospy.Service(
            "~set_min_amp", SetFloat32, self.set_min_amp_cb
        )

        self._pub = rospy.Publisher("~vad", AudioData, queue_size=10)
        self._pub_amp = rospy.Publisher("~amp", Float32, queue_size=10)
        self._pub_rec = rospy.Publisher("~in_rec", Bool, queue_size=1, latch=True)
        self._pub_min_amp = rospy.Publisher(
            "~min_amp", Float32, queue_size=1, latch=True
        )
        amp_msg = Float32()
        amp_msg.data = self.start_amp
        self._pub_min_amp.publish(amp_msg)
        self._pub_enabled = rospy.Publisher("~enabled", Bool, queue_size=1, latch=True)
        self._sub = rospy.Subscriber(
            "audio",
            AudioData,
            self.audio_cb,
        )

        self.flush_and_enable()
        self._pub_enabled.publish(True)

        self.one_more = False

        rospy.loginfo(logger_name="SileroVAD", msg=f"Silero VAD node started")

    def flush_and_enable(self):
        with self.buffer_lock:
            self.prebuf = np.array([], dtype=np.float32)
            self.lastbuf = np.array([], dtype=np.float32)
            self.recording = False
            self.vad_iterator.reset_states()
            self.enabled = True
            self.overflow = np.array([], dtype=np.float32)

    def audio_cb(self, msg: AudioData) -> None:

        if not self.enabled:
            return

        # lock whole function
        with self.buffer_lock:
            if not self.enabled:
                return

            audio = np.frombuffer(msg.data, dtype=self.depth_type)
            self.prebuf = np.append(self.prebuf, audio)

            vals = self.prebuf.shape[0]
            if vals < 512:
                return

            if vals > 512:
                self.overflow = self.prebuf[512:]
                self.prebuf = self.prebuf[:512]

            amp = np.max(self.prebuf)
            amp_msg = Float32()
            amp_msg.data = amp

            #print(f"audio amp: {amp_msg.data}")
            self._pub_amp.publish(amp_msg)

            # Dont start recording until min amplitute is reached?
            if not self.recording and amp < self.start_amp:
                speech_dict = False
            else:
                speech_dict = self.vad_iterator(torch.from_numpy(self.prebuf))

            if speech_dict:
                if not self.recording and "start" in speech_dict:
                    self.start_time = speech_dict["start"]
                    self.recording = True
                    self._pub_rec.publish(self.recording)
                    self.data = self.lastbuf
                    rospy.loginfo(
                        logger_name="SileroVAD",
                        msg=f"started speech segment",
                    )

                elif self.recording and "end" in speech_dict:
                    self.end_time = speech_dict["end"]
                    rospy.loginfo(
                        logger_name="SileroVAD",
                        msg=f"recorded speech segment d: {self.end_time - self.start_time}",
                    )
                    self.recording = False
                    self._pub_rec.publish(self.recording)

                    self.data = np.append(self.data, self.prebuf)
                    vad_msg = AudioData()
                    vad_msg.data = self.data.tobytes()
                    self._pub.publish(vad_msg)
                    self.vad_iterator.reset_states()  # reset model states after each audio

            if self.recording:
                self.data = np.append(self.data, self.prebuf)

            self.lastbuf = self.prebuf
            # we use overflow to start the buffer again
            self.prebuf = self.overflow

    def enable_cb(self, req: SetBoolRequest):
        res = SetBoolResponse()
        res.success = True

        if req.data:
            res.message = "Silero enabled"
            self.flush_and_enable()
        else:
            res.message = "Silero disabled"
            self.enabled = False

        rospy.loginfo(logger_name="SileroVAD", msg=f"{res.message}")
        self._pub_enabled.publish(self.enabled)
        return res

    def set_min_amp_cb(self, req: SetFloat32Request):
        res = SetFloat32Response()
        if req.data > 1.0 or req.data < 0.0:
            res.success = False
        else:
            res.success = True

        self.start_amp = min(max(req.data, 0.0), 1.0)
        res.message = f"set min amp to {self.start_amp }"

        amp_msg = Float32()
        amp_msg.data = self.start_amp

        self._pub_min_amp.publish(amp_msg)

        rospy.loginfo(logger_name="SileroVAD", msg=f"{res.message}")
        return res


def main():
    rospy.init_node("silero_vad")
    start_amp = rospy.get_param("~start_amp", 0.0)
    node = SileroVadNode(start_amp)
    rospy.spin()


if __name__ == "__main__":
    main()
