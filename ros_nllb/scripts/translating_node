#!/usr/bin/env python3

import os
import sys
import threading
import time

# ROS
import torch
import rospy
from clf_speech_msgs.msg import ASR
from clf_speech_msgs.srv import Translate, TranslateRequest, TranslateResponse

from transformers import AutoModelForSeq2SeqLM, AutoTokenizer
import clf_audio_util.utils as util


class NLLBNode:
    def __init__(self, model):

        self.device = "cuda:0" if torch.cuda.is_available() else "cpu"
        print(f"using {self.device}")

        rospy.loginfo(logger_name="NLLBNode", msg="initializing:")
        self.tokenizer = AutoTokenizer.from_pretrained(
            model,
            src_lang="eng_Latn",
        )
        self.model = AutoModelForSeq2SeqLM.from_pretrained(model).to(self.device)

        self.srv = rospy.Service("~translate", Translate, self.cb)

        # Warmup
        out = self.translate("hello world and good day sir", ASR.DE)
        rospy.loginfo(logger_name="NLLBNode", msg=f"warmup: {out}")

    def translate(self, text, lang):
        inputs = self.tokenizer(text, return_tensors="pt").to(self.device)
        translated_tokens = self.model.generate(
            **inputs,
            forced_bos_token_id=self.tokenizer.convert_tokens_to_ids[
                util.lang_to_flores200.get(lang, "deu_Latn")
            ],
            max_length=30,
        )

        return self.tokenizer.batch_decode(translated_tokens, skip_special_tokens=True)[
            0
        ]

    def cb(self, req: TranslateRequest) -> TranslateResponse:
        res = TranslateResponse()
        rospy.loginfo(logger_name="NLLBNode", msg=f"Got request: {req}")
        start = time.time()
        text = self.translate(req.text, req.target_lang)
        end = time.time()
        rospy.loginfo(
            logger_name="NLLBNode", msg=f"Translated: '{text}' in {end - start}s"
        )

        res.text = f"{text}"

        return res


if __name__ == "__main__":

    # Start ROS node
    rospy.init_node("nllb")

    try:
        _model = os.path.expanduser(rospy.get_param("~model"))
    except KeyError as e:
        rospy.logerr(logger_name="NLLBNode", msg="Parameter %s not found" % e)
        sys.exit(1)

    node = NLLBNode(_model)
    rospy.loginfo(logger_name="NLLBNode", msg="\nNLLB running")
    rospy.spin()
