#!/usr/bin/env python

import os
import sys
import threading
import time

# ROS
import torch
import rospy
from clf_speech_msgs.msg import ASR
from clf_speech_msgs.srv import Translate, TranslateRequest, TranslateResponse

import ctranslate2
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer
import clf_audio_util.utils as util


class NLLBNode:
    def __init__(self, ct2_model, model):

        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        print(f"using {self.device}")

        rospy.loginfo(logger_name="NLLBNode", msg="initializing:")
        self.tokenizer = AutoTokenizer.from_pretrained(
            model,
            src_lang="eng_Latn",
        )
        self.model = ctranslate2.Translator(ct2_model, device=self.device)

        self.srv = rospy.Service("~translate", Translate, self.cb)

        # Warmup
        out = self.translate("hello world and good day sir", ASR.DE)
        rospy.loginfo(logger_name="NLLBNode", msg=f"warmup: {out}")

    def translate(self, text, lang):
        inputs = self.tokenizer.convert_ids_to_tokens(self.tokenizer.encode(text))
        target_prefix = [util.lang_to_flores200.get(lang, "eng_Latn")]
        results = self.model.translate_batch([inputs], target_prefix=[target_prefix])
        target = results[0].hypotheses[0][1:]
        out = self.tokenizer.decode(self.tokenizer.convert_tokens_to_ids(target))

        return out

    def cb(self, req: TranslateRequest) -> TranslateResponse:
        res = TranslateResponse()
        lang = {util.lang_to_flores200.get(req.target_lang, "unknown")}
        rospy.loginfo(logger_name="NLLBNode", msg=f"Got request [{lang}]: {req.text}")
        start = time.time()
        text = self.translate(req.text, req.target_lang)
        end = time.time()
        rospy.loginfo(
            logger_name="NLLBNode", msg=f"Translated: '{text}' in {end - start}s"
        )

        res.text = f"{text}"

        return res


if __name__ == "__main__":

    # Start ROS node
    rospy.init_node("nllb")

    try:
        _model = os.path.expanduser(rospy.get_param("~model"))
        _ct_model = os.path.expanduser(rospy.get_param("~ct2_model"))
    except KeyError as e:
        rospy.logerr(logger_name="NLLBNode", msg="Parameter %s not found" % e)
        sys.exit(1)

    node = NLLBNode(_ct_model, _model)
    rospy.loginfo(logger_name="NLLBNode", msg="\nNLLB running")
    rospy.spin()
